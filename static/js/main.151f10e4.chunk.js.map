{"version":3,"sources":["components/Container.module.css","components/Buttons.module.css","components/Left.js","components/Right.js","components/weekAndMonths.js","components/Month.js","components/Year.js","components/Date.js","components/DateHeader.js","components/Week.js","components/Days.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Left","previousMonth","viewBox","className","style","left","onClick","d","Right","nextMonth","right","week","months","Month","month","Year","year","Date","props","cursor","goToToday","DateHeader","dates","Week","map","w","key","Days","displayDays","days","Container","setState","date","getMonth","getFullYear","state","firstDay","lastDay","day","i","getDay","getDate","push","today","container","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.151f10e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1IBEz\",\"dates\":\"Container_dates__hgjcN\",\"week\":\"Container_week__2sJFo\",\"days\":\"Container_days__3EBnh\",\"today\":\"Container_today__RvODk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"left\":\"Buttons_left__12d5S\",\"right\":\"Buttons_right__2Ln51\"};","import React from 'react';\r\nimport style from './Buttons.module.css';\r\n\r\nfunction Left({ previousMonth }) {\r\n  return (\r\n    <svg viewBox=\"0 0 256 512\" className={style.left} onClick={previousMonth}>\r\n      <path d=\"M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z\"></path>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Left;\r\n","import React from 'react';\r\nimport style from './Buttons.module.css';\r\n\r\nfunction Right({ nextMonth }) {\r\n  return (\r\n    <svg viewBox=\"0 0 256 512\" className={style.right} onClick={nextMonth}>\r\n      <path d=\"M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z\"></path>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Right;\r\n","const week = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\nconst months = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n];\r\n\r\nexport { week, months };\r\n","import React from 'react';\r\nimport { months } from './weekAndMonths';\r\n\r\nfunction Month({ month }) {\r\n  return <span>{months[month]}</span>;\r\n}\r\n\r\nexport default Month;\r\n","import React from 'react';\r\n\r\nfunction Year({ year }) {\r\n  return <span>{year}</span>;\r\n}\r\n\r\nexport default Year;\r\n","import React from 'react';\r\nimport Month from './Month';\r\nimport Year from './Year';\r\n\r\nfunction Date(props) {\r\n  return (\r\n    <span style={{ cursor: 'pointer' }} onClick={props.goToToday}>\r\n      <Month {...props} />, <Year {...props} />\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default Date;\r\n","import React from 'react';\r\nimport Left from './Left';\r\nimport Right from './Right';\r\nimport Date from './Date';\r\nimport style from './Container.module.css';\r\n\r\nfunction DateHeader(props) {\r\n  return (\r\n    <div className={style.dates}>\r\n      <Left {...props} />\r\n      <Date {...props} />\r\n      <Right {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DateHeader;\r\n","import React from 'react';\r\nimport { week } from './weekAndMonths';\r\nimport style from './Container.module.css';\r\n\r\nfunction Week() {\r\n  return (\r\n    <div className={style.week}>\r\n      {week.map(w => (\r\n        <span key={w}>{w}</span>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Week;\r\n","import React from 'react';\r\nimport style from './Container.module.css';\r\n\r\nfunction Days({ displayDays }) {\r\n  return <div className={style.days}>{displayDays()}</div>;\r\n}\r\n\r\nexport default Days;\r\n","import React, { Component } from 'react';\r\nimport DateHeader from './DateHeader';\r\nimport Week from './Week';\r\nimport Days from './Days';\r\nimport style from './Container.module.css';\r\n\r\nclass Container extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.date = new Date();\r\n\r\n    this.state = {\r\n      month: this.date.getMonth(),\r\n      year: this.date.getFullYear(),\r\n    };\r\n  }\r\n\r\n  goToToday = () =>\r\n    this.setState({\r\n      month: this.date.getMonth(),\r\n      year: this.date.getFullYear(),\r\n    });\r\n\r\n  displayDays = () => {\r\n    const { month, year } = this.state;\r\n\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n\r\n    let days = [];\r\n    let day = 1;\r\n\r\n    const isToday = () =>\r\n      day === this.date.getDate() &&\r\n      month === this.date.getMonth() &&\r\n      year === this.date.getFullYear();\r\n\r\n    for (let i = 0; i < 42; i++) {\r\n      if (i < firstDay.getDay() || i >= lastDay.getDate() + firstDay.getDay()) {\r\n        days.push(<span key={i}>-</span>);\r\n      } else if (isToday()) {\r\n        days.push(\r\n          <span key={i} className={style.today}>\r\n            {day}\r\n          </span>\r\n        );\r\n        day++;\r\n      } else {\r\n        days.push(<span key={i}>{day}</span>);\r\n        day++;\r\n      }\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  nextMonth = () => {\r\n    const { month, year } = this.state;\r\n\r\n    this.setState({\r\n      month: month === 11 ? 0 : month + 1,\r\n      year: month === 11 ? year + 1 : year,\r\n    });\r\n  };\r\n\r\n  previousMonth = () => {\r\n    const { month, year } = this.state;\r\n\r\n    this.setState({\r\n      month: month === 0 ? 11 : month - 1,\r\n      year: month === 0 ? year - 1 : year,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={style.container}>\r\n        <DateHeader\r\n          month={this.state.month}\r\n          year={this.state.year}\r\n          previousMonth={this.previousMonth}\r\n          nextMonth={this.nextMonth}\r\n          goToToday={this.goToToday}\r\n        />\r\n        <Week />\r\n        <Days displayDays={this.displayDays} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React from 'react';\nimport Container from './components/Container';\n\nfunction App() {\n  return <Container />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}